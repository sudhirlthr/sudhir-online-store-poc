/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Blog', null, global);
goog.exportSymbol('proto.Bloglist', null, global);
goog.exportSymbol('proto.Comment', null, global);
goog.exportSymbol('proto.Commentlist', null, global);
goog.exportSymbol('proto.DeletePost', null, global);
goog.exportSymbol('proto.Grpcsocialuser', null, global);
goog.exportSymbol('proto.Logincms', null, global);
goog.exportSymbol('proto.Usercredential', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Usercredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Usercredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Usercredential.displayName = 'proto.Usercredential';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Usercredential.prototype.toObject = function(opt_includeInstance) {
  return proto.Usercredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Usercredential} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Usercredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    password: msg.getPassword()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Usercredential}
 */
proto.Usercredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Usercredential;
  return proto.Usercredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Usercredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Usercredential}
 */
proto.Usercredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Usercredential} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Usercredential.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Usercredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Usercredential.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Usercredential} The clone.
 */
proto.Usercredential.prototype.cloneMessage = function() {
  return /** @type {!proto.Usercredential} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.Usercredential.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Usercredential.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.Usercredential.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Usercredential.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Logincms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Logincms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Logincms.displayName = 'proto.Logincms';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Logincms.prototype.toObject = function(opt_includeInstance) {
  return proto.Logincms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Logincms} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Logincms.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: msg.getResponsecode(),
    responsemessage: msg.getResponsemessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Logincms}
 */
proto.Logincms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Logincms;
  return proto.Logincms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Logincms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Logincms}
 */
proto.Logincms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsemessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Logincms} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Logincms.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Logincms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Logincms.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResponsecode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getResponsemessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Logincms} The clone.
 */
proto.Logincms.prototype.cloneMessage = function() {
  return /** @type {!proto.Logincms} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 responsecode = 1;
 * @return {number}
 */
proto.Logincms.prototype.getResponsecode = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Logincms.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string responsemessage = 2;
 * @return {string}
 */
proto.Logincms.prototype.getResponsemessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Logincms.prototype.setResponsemessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Blog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Blog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Blog.displayName = 'proto.Blog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Blog.prototype.toObject = function(opt_includeInstance) {
  return proto.Blog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Blog} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Blog.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogid: msg.getBlogid(),
    content: msg.getContent(),
    refuser: msg.getRefuser(),
    comments: (f = msg.getComments()) && proto.Commentlist.toObject(includeInstance, f),
    title: msg.getTitle(),
    creationdate: msg.getCreationdate()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Blog}
 */
proto.Blog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Blog;
  return proto.Blog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Blog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Blog}
 */
proto.Blog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlogid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefuser(value);
      break;
    case 4:
      var value = new proto.Commentlist;
      reader.readMessage(value,proto.Commentlist.deserializeBinaryFromReader);
      msg.setComments(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Blog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Blog.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Blog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Blog.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlogid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRefuser();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getComments();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Commentlist.serializeBinaryToWriter
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getCreationdate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Blog} The clone.
 */
proto.Blog.prototype.cloneMessage = function() {
  return /** @type {!proto.Blog} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 blogid = 1;
 * @return {number}
 */
proto.Blog.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Blog.prototype.setBlogid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.Blog.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Blog.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string refuser = 3;
 * @return {string}
 */
proto.Blog.prototype.getRefuser = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Blog.prototype.setRefuser = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Commentlist comments = 4;
 * @return {proto.Commentlist}
 */
proto.Blog.prototype.getComments = function() {
  return /** @type{proto.Commentlist} */ (
    jspb.Message.getWrapperField(this, proto.Commentlist, 4));
};


/** @param {proto.Commentlist|undefined} value  */
proto.Blog.prototype.setComments = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Blog.prototype.clearComments = function() {
  this.setComments(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Blog.prototype.hasComments = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.Blog.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.Blog.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string creationdate = 6;
 * @return {string}
 */
proto.Blog.prototype.getCreationdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.Blog.prototype.setCreationdate = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Bloglist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Bloglist.repeatedFields_, null);
};
goog.inherits(proto.Bloglist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Bloglist.displayName = 'proto.Bloglist';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Bloglist.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Bloglist.prototype.toObject = function(opt_includeInstance) {
  return proto.Bloglist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Bloglist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Bloglist.toObject = function(includeInstance, msg) {
  var f, obj = {
    bloglistid: msg.getBloglistid(),
    blogsList: jspb.Message.toObjectList(msg.getBlogsList(),
    proto.Blog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Bloglist}
 */
proto.Bloglist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Bloglist;
  return proto.Bloglist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Bloglist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Bloglist}
 */
proto.Bloglist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBloglistid(value);
      break;
    case 2:
      var value = new proto.Blog;
      reader.readMessage(value,proto.Blog.deserializeBinaryFromReader);
      msg.getBlogsList().push(value);
      msg.setBlogsList(msg.getBlogsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Bloglist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Bloglist.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Bloglist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Bloglist.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBloglistid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getBlogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Blog.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Bloglist} The clone.
 */
proto.Bloglist.prototype.cloneMessage = function() {
  return /** @type {!proto.Bloglist} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 bloglistid = 1;
 * @return {number}
 */
proto.Bloglist.prototype.getBloglistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Bloglist.prototype.setBloglistid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Blog blogs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Blog>}
 */
proto.Bloglist.prototype.getBlogsList = function() {
  return /** @type{!Array.<!proto.Blog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Blog, 2));
};


/** @param {Array.<!proto.Blog>} value  */
proto.Bloglist.prototype.setBlogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.Bloglist.prototype.clearBlogsList = function() {
  this.setBlogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.displayName = 'proto.Comment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsid: msg.getCommentsid(),
    content: msg.getContent(),
    commentsdate: msg.getCommentsdate(),
    blogid: msg.getBlogid(),
    refuser: msg.getRefuser()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment}
 */
proto.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment;
  return proto.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment}
 */
proto.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommentsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentsdate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlogid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefuser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Comment} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Comment.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Comment.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCommentsid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCommentsdate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getBlogid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getRefuser();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Comment} The clone.
 */
proto.Comment.prototype.cloneMessage = function() {
  return /** @type {!proto.Comment} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 commentsid = 1;
 * @return {number}
 */
proto.Comment.prototype.getCommentsid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Comment.prototype.setCommentsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.Comment.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Comment.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string commentsdate = 3;
 * @return {string}
 */
proto.Comment.prototype.getCommentsdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Comment.prototype.setCommentsdate = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 blogid = 4;
 * @return {number}
 */
proto.Comment.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.Comment.prototype.setBlogid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string refuser = 5;
 * @return {string}
 */
proto.Comment.prototype.getRefuser = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.Comment.prototype.setRefuser = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Commentlist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Commentlist.repeatedFields_, null);
};
goog.inherits(proto.Commentlist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Commentlist.displayName = 'proto.Commentlist';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Commentlist.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Commentlist.prototype.toObject = function(opt_includeInstance) {
  return proto.Commentlist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Commentlist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Commentlist.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentlistid: msg.getCommentlistid(),
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.Comment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Commentlist}
 */
proto.Commentlist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Commentlist;
  return proto.Commentlist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Commentlist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Commentlist}
 */
proto.Commentlist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommentlistid(value);
      break;
    case 2:
      var value = new proto.Comment;
      reader.readMessage(value,proto.Comment.deserializeBinaryFromReader);
      msg.getCommentsList().push(value);
      msg.setCommentsList(msg.getCommentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Commentlist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Commentlist.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Commentlist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Commentlist.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCommentlistid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Comment.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Commentlist} The clone.
 */
proto.Commentlist.prototype.cloneMessage = function() {
  return /** @type {!proto.Commentlist} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 commentlistid = 1;
 * @return {number}
 */
proto.Commentlist.prototype.getCommentlistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Commentlist.prototype.setCommentlistid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Comment comments = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Comment>}
 */
proto.Commentlist.prototype.getCommentsList = function() {
  return /** @type{!Array.<!proto.Comment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Comment, 2));
};


/** @param {Array.<!proto.Comment>} value  */
proto.Commentlist.prototype.setCommentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.Commentlist.prototype.clearCommentsList = function() {
  this.setCommentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeletePost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeletePost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeletePost.displayName = 'proto.DeletePost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeletePost.prototype.toObject = function(opt_includeInstance) {
  return proto.DeletePost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeletePost} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DeletePost.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogid: msg.getBlogid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeletePost}
 */
proto.DeletePost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeletePost;
  return proto.DeletePost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeletePost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeletePost}
 */
proto.DeletePost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlogid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DeletePost} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DeletePost.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeletePost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DeletePost.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlogid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DeletePost} The clone.
 */
proto.DeletePost.prototype.cloneMessage = function() {
  return /** @type {!proto.DeletePost} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 blogid = 1;
 * @return {number}
 */
proto.DeletePost.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.DeletePost.prototype.setBlogid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Grpcsocialuser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Grpcsocialuser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Grpcsocialuser.displayName = 'proto.Grpcsocialuser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Grpcsocialuser.prototype.toObject = function(opt_includeInstance) {
  return proto.Grpcsocialuser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Grpcsocialuser} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Grpcsocialuser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: msg.getUserid(),
    email: msg.getEmail(),
    firstname: msg.getFirstname(),
    lastname: msg.getLastname(),
    token: msg.getToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Grpcsocialuser}
 */
proto.Grpcsocialuser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Grpcsocialuser;
  return proto.Grpcsocialuser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Grpcsocialuser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Grpcsocialuser}
 */
proto.Grpcsocialuser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Grpcsocialuser} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Grpcsocialuser.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Grpcsocialuser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Grpcsocialuser.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLastname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Grpcsocialuser} The clone.
 */
proto.Grpcsocialuser.prototype.cloneMessage = function() {
  return /** @type {!proto.Grpcsocialuser} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 userid = 1;
 * @return {number}
 */
proto.Grpcsocialuser.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Grpcsocialuser.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.Grpcsocialuser.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Grpcsocialuser.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string firstName = 3;
 * @return {string}
 */
proto.Grpcsocialuser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Grpcsocialuser.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string lastName = 4;
 * @return {string}
 */
proto.Grpcsocialuser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Grpcsocialuser.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string token = 5;
 * @return {string}
 */
proto.Grpcsocialuser.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.Grpcsocialuser.prototype.setToken = function(value) {
  jspb.Message.setField(this, 5, value);
};


goog.object.extend(exports, proto);
